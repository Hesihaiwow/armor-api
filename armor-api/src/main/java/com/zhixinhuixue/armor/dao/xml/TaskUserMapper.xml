<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhixinhuixue.armor.dao.IZSYTaskUserMapper">
    <resultMap id="BaseResultMap" type="com.zhixinhuixue.armor.model.pojo.TaskUser">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="task_id" jdbcType="BIGINT" property="taskId"/>
        <result column="user_id" jdbcType="BIGINT" property="userId"/>
        <result column="task_hours" jdbcType="INTEGER" property="taskHours"/>
        <result column="begin_time" jdbcType="TIMESTAMP" property="beginTime"/>
        <result column="end_time" jdbcType="TIMESTAMP" property="endTime"/>
        <result column="description" jdbcType="LONGVARCHAR" property="description"/>
        <result column="complete_hours" jdbcType="INTEGER" property="completeHours"/>
        <result column="complete_time" jdbcType="TIMESTAMP" property="completeTime"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="task_level" jdbcType="INTEGER" property="taskLevel"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, task_id, user_id, task_hours, begin_time, end_time, description, complete_hours,
        complete_time, status, create_time,task_level
    </sql>

    <resultMap id="DetailResultMap" type="com.zhixinhuixue.armor.model.bo.TaskUserBO" extends="BaseResultMap">
        <result column="userName" jdbcType="VARCHAR" property="userName"/>
        <result column="job_role" jdbcType="INTEGER" property="jobRole"/>
        <association property="commentNum" column="{userId=user_id,taskId=task_id}" select="com.zhixinhuixue.armor.dao.IZSYTaskCommentMapper.selectByCreateBy"></association>
        <collection property="taskComments" column="id"
                    select="com.zhixinhuixue.armor.dao.IZSYTaskCommentMapper.selectByTaskUserId"
                    ofType="com.zhixinhuixue.armor.model.bo.TaskCommentBO"/>
        <collection property="userWeeks" column="{userId=user_id,taskId=task_id}"
                    select="com.zhixinhuixue.armor.dao.IZSYUserWeekMapper.selectByTaskId"
                    ofType="com.zhixinhuixue.armor.model.pojo.UserWeek">
        </collection>
    </resultMap>

    <resultMap id="personResultMap" type="com.zhixinhuixue.armor.model.bo.PersonTaskBO" extends="BaseResultMap">
        <result column="taskName" jdbcType="VARCHAR" property="taskName"/>
        <result column="taskDescription" jdbcType="VARCHAR" property="taskDescription"/>
    </resultMap>

    <resultMap id="TaskUserHoursMap" type="com.zhixinhuixue.armor.model.bo.TaskUserHoursBO">
        <result column="id" property="id" jdbcType="BIGINT"/>
        <result column="user_id" property="userId" jdbcType="BIGINT"/>
        <result column="user_level" property="userLevel" jdbcType="INTEGER"/>
        <result column="task_level" property="taskLevel" jdbcType="INTEGER"/>
        <result column="task_id" property="taskId" jdbcType="BIGINT"/>
        <result column="task_type" property="taskType" jdbcType="INTEGER"/>
        <result column="task_hours" jdbcType="INTEGER" property="taskHours"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="complete_time" jdbcType="TIMESTAMP" property="completeTime"/>
    </resultMap>

    <!-- 根据task_id查询详情 -->
    <select id="selectDetailByTaskId" parameterType="java.lang.Long" resultMap="DetailResultMap">
        select t1.*,t3.`name` as userName,t3.job_role as job_role from task_user t1
        left join `user` t3 on t1.user_id = t3.id
        where task_id = #{id};
    </select>

    <delete id="deleteByTaskId" parameterType="java.lang.Long">
        delete from task_user where task_id = #{taskId}
    </delete>

    <insert id="insertList" parameterType="java.util.List">
        insert into task_user (id, task_id,
        user_id, task_hours, begin_time,
        end_time, description, complete_hours,
        complete_time, status,create_time
        )
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.id,jdbcType=BIGINT}, #{item.taskId,jdbcType=BIGINT},
            #{item.userId,jdbcType=BIGINT}, #{item.taskHours,jdbcType=INTEGER}, #{item.beginTime,jdbcType=TIMESTAMP},
            #{item.endTime,jdbcType=TIMESTAMP}, #{item.description,jdbcType=VARCHAR},
            #{item.completeHours,jdbcType=INTEGER},
            #{item.completeTime,jdbcType=TIMESTAMP}, #{item.status,jdbcType=INTEGER},
            #{item.createTime,jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from task_user
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from task_user
    where id = #{id,jdbcType=BIGINT}
  </delete>

    <delete id="deleteByTaskIdAndUserId">
        delete from task_user where task_id = #{taskId} and user_id = #{userId}
    </delete>
    <insert id="insert" parameterType="com.zhixinhuixue.armor.model.pojo.TaskUser">
   insert into task_user (id, task_id,
      user_id, task_hours, begin_time,
      end_time, description, complete_hours,
      complete_time, status, create_time,task_level
      )
    values (#{id,jdbcType=BIGINT}, #{taskId,jdbcType=BIGINT},
      #{userId,jdbcType=BIGINT}, #{taskHours,jdbcType=INTEGER}, #{beginTime,jdbcType=TIMESTAMP},
      #{endTime,jdbcType=TIMESTAMP}, #{description,jdbcType=VARCHAR}, #{completeHours,jdbcType=INTEGER},
      #{completeTime,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP},
      #{taskLevel,jdbcType=INTEGER}
      )
  </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.zhixinhuixue.armor.model.pojo.TaskUser">
        update task_user
        <set>
            <if test="taskId != null">
                task_id = #{taskId,jdbcType=BIGINT},
            </if>
            <if test="userId != null">
                user_id = #{userId,jdbcType=BIGINT},
            </if>
            <if test="taskHours != null">
                task_hours = #{taskHours,jdbcType=INTEGER},
            </if>
            <if test="taskLevel != null">
                task_level = #{taskLevel,jdbcType=INTEGER},
            </if>
            <if test="beginTime != null">
                begin_time = #{beginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="endTime != null">
                end_time = #{endTime,jdbcType=TIMESTAMP},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="completeHours != null">
                complete_hours = #{completeHours,jdbcType=INTEGER},
            </if>
            <if test="completeTime != null">
                complete_time = #{completeTime,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="getPersonalList" parameterType="com.zhixinhuixue.armor.model.dto.request.PersonalTaskListReqDTO" resultMap="personResultMap">
        SELECT (@rowid := @rowid+1) AS id,a.* FROM(
            SELECT u.*,t.description as taskDescription,t.`name` as taskName FROM task_user u
            JOIN task t on u.task_id = t.id
            where t.is_delete = 0 AND t.review_status = 3  AND  user_id = #{userId}
                <if test="startTime != null">
                    <![CDATA[ AND  (u.begin_time >= #{startTime,jdbcType=TIMESTAMP} or u.end_time >= #{startTime,jdbcType=TIMESTAMP}) ]]>
                </if>
                <if test="endTime != null">
                    <![CDATA[ AND (u.end_time <= #{endTime,jdbcType=TIMESTAMP} or u.begin_time <= #{endTime,jdbcType=TIMESTAMP})]]>
                </if>
              ORDER BY u.begin_time desc
        )as a,(SELECT (@rowid:=0))as b
    </select>
    <!--  sch  -->
    <!--查询任务开发人员-->
    <select id="selectUserByTaskId" resultType="java.lang.Long">
        SELECT DISTINCT `user_id` FROM `task_user` WHERE `task_id` = #{id}
    </select>

    <!--根据任务id和用户id查询taskUser-->
    <select id="selectByTaskAndUser" resultMap="BaseResultMap">
        SELECT * FROM `task_user` WHERE `task_id` = #{taskId} AND `user_id` = #{userId}
    </select>

    <!--根据任务id查询参与人员-->
    <select id="selectUserIdByTaskId" resultType="java.lang.Long">
        SELECT user_id FROM task_user WHERE task_id = #{taskId}
    </select>

    <!--根据用户和时间查询已完成-->
    <select id="selectByUserAndTime" resultMap="BaseResultMap">
        SELECT tu.* FROM task_user tu
        LEFT JOIN task t ON t.id = tu.task_id
        WHERE tu.user_id = #{userId}
        <![CDATA[ AND tu.complete_time >= #{beginTime}]]>
        <![CDATA[ AND tu.complete_time <= #{endTime}]]>
        AND t.is_delete = 0 AND t.review_status = 3 AND t.type = 1 AND tu.`status` > 1;
    </select>

    <!--查询2019-7 之后的没有功能点的多人任务-->
    <select id="selectWithoutFunctionMultiTask" resultMap="TaskUserHoursMap">
        SELECT tu.id,tu.task_id,tu.user_id,tu.task_hours,t.type task_type,u.level user_level,
        tu.`create_time`,tu.`complete_time`,tu.task_level
        FROM task_user tu
        LEFT JOIN task t ON t.id = tu.task_id
        LEFT JOIN task_temp  tt ON tt.task_id = t.id AND tt.review_status = 2
        LEFT JOIN task_temp_function ttf ON ttf.tt_id = tt.id
        LEFT JOIN `user` u ON u.id = tu.`user_id`
        WHERE tu.end_time >= '2019-07-01 00:00:00' AND t.type = 2 AND ttf.id IS NULL AND t.`status` = 3
        GROUP BY tu.id;
    </select>

    <!--查询2019-7月之后的 没有任务级别的个人任务-->
    <select id="selectWithoutTaskLevel" resultMap="TaskUserHoursMap">
        SELECT tu.id,tu.task_id,tu.user_id,tu.task_hours,t.type task_type,u.level user_level,
        tu.`create_time`,tu.`complete_time`,tu.task_level
        FROM task_user tu
        LEFT JOIN task t ON t.id = tu.task_id
        LEFT JOIN `user` u ON u.id = tu.`user_id`
        WHERE tu.end_time >= '2019-07-01 00:00:00' AND t.type = 1 AND tu.task_level IS NULL AND t.`status` = 3
        GROUP BY tu.id;
    </select>

    <!--查询2019-7 之后的有功能点的而且已经结束的多人任务-->
    <select id="selectWithFunctionMultiTask" resultMap="TaskUserHoursMap">
        SELECT tu.id,tu.task_id,tu.user_id,tu.task_hours,t.type task_type,u.`level` user_level,
        tu.create_time,tu.complete_time,tu.task_level
        FROM task_user tu
        LEFT JOIN task t ON t.id = tu.task_id
        LEFT JOIN task_temp  tt ON tt.task_id = t.id AND tt.review_status = 2
        LEFT JOIN task_temp_function ttf ON ttf.tt_id = tt.id
        LEFT JOIN `user` u ON u.id = tu.`user_id`
        WHERE tu.end_time >= '2019-07-01 00:00:00' AND t.type = 2 AND ttf.id IS NOT NULL AND t.`status` = 3
        GROUP BY tu.id;
    </select>

    <!--查询2019-7月之后的 有任务级别的而且已经完成的个人任务-->
    <select id="selectWithTaskLevel" resultMap="TaskUserHoursMap">
        SELECT tu.id,tu.task_id,tu.user_id,tu.task_hours,t.type task_type,u.`level` user_level,
        tu.create_time,tu.complete_time,tu.task_level
        FROM task_user tu
        LEFT JOIN task t ON t.id = tu.task_id
        LEFT JOIN `user` u ON u.id = tu.`user_id`
        WHERE tu.end_time >= '2019-07-01 00:00:00' AND t.type = 1 AND tu.task_level IS NOT NULL AND t.`status` = 3
        GROUP BY tu.id;
    </select>
    <!--  sch  -->
</mapper>